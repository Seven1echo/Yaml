# 名称：Seven1_fallback
# 版本: v1.0.5
# 地址：https://github.com/Seven1echo
# 日期：2025年8月12日

# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。


# ==================== 节点订阅 ===================
# 节点锚点
PProviders: &PProviders {type: http, interval: 86400, proxy: DIRECT, health-check: {enable: true, url: 'https://www.gstatic.com/generate_204', interval: 300, timeout: 3000}}

# 订阅设置（PS:前面“订阅1、订阅2”可以改成机场名称，有多少个机场就复制多少行，多余的行可删除；后面的“机场1、机场2”是给每个节点添加固定的前缀）
proxy-providers:
#  订阅1: {<<: *PProviders, url: '订阅链接1', override: {additional-prefix: '[机场1] '}}
#  订阅2: {<<: *PProviders, url: '订阅链接2', override: {additional-prefix: '[机场2] '}}

# 节点信息
proxies:
#  - name: 主页
#    type: ss
#    server: ****.top                   # 确认域名/IP有效
#    port: ****                         # 确认端口开放
#    cipher: aes-256-gcm                # 确认服务端支持此加密
#    password: "****"                   # 特殊字符时建议加引号
#    udp: true                          # 如需UDP转发可添加
 

# ==================== 核心配置 ===================
# 基础配置
mode: rule                              # 运行模式
port: 7890                              # HTTP代理端口
socks-port: 7891                        # SOCKS5 代理端口
redir-port: 7892                        # 透明代理端口
mixed-port: 7893                        # 混合代理端口
tproxy-port: 7895                       # TPROXY 透明代理端口
ipv6: true                              # 开启ipv6
allow-lan: true                         # 允许局域网连接
log-level: info                         # 日志级别
bind-address: '*'                       # 绑定到所有可用的网络接口
unified-delay: true                     # 统一的延迟处理
tcp-concurrent: true                    # TCP连接的并发处理
find-process-mode: 'always'             # 查找进程
global-client-fingerprint: chrome       # 伪装客户端类型
keep-alive-interval: 15                 # TCP保持活动
keep-alive-idle: 600                    # 保持连接空闲时间

# 认证配置
authentication:                         
#  - nikki:seven1                       # 用户名:密码 需要使用请取消注释
skip-auth-prefixes:                     # 跳过认证的前缀/网段
  - 192.168.1.0/24
  - 192.168.31.0/24
  - 192.168.100.0/24
  - 127.0.0.1/8
  - 10.0.0.0/24

# GEO 数据配置
geodata-mode: false                     # 禁用传统 Geo 数据加载模式
geodata-loader: standard                # 使用标准加载器（非内存优化模式）
geo-auto-update: true                   # 启用自动更新
geo-update-interval: 48                 # 更新间隔为 48 小时
geox-url:
  geosite: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb:    "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip:   "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn:     "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 管理面板
external-ui-url: https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip
external-ui-name: zashboard
external-ui: ui
external-controller: 0.0.0.0:9090
secret: ""

# 配置存储
profile:
  store-selected: true                  # 保存用户手动选择的代理节点或策略组
  store-fake-ip: true                   # 持久化存储 Fake-IP 映射关系

# 流量嗅探
sniffer:
  enable: true                          # 启用流量嗅探
  override-destination: false           # 不覆盖目标地址
  force-dns-mapping: true               # 强制DNS映射
  parse-pure-ip: true                   # 解析纯IP流量

# TUN配置
tun:
  enable: true                          # 启用 TUN 虚拟网卡
  stack: mixed                          # 混合协议栈（gVisor + 内核）
  dns-hijack:                           # DNS 流量劫持
    - "any:53"                          # 拦截所有网卡的 53 端口（UDP）
    - "tcp://any:53"                    # 拦截所有网卡的 53 端口（TCP）
  auto-route: true                      # 自动添加路由规则
  auto-redirect: true                   # 自动重定向流量至 TUN
  auto-detect-interface: true           # 自动检测出口网卡

# DNS设置
dns:
  enable: true                          # 启用DNS服务
  listen: 0.0.0.0:7874                  # 监听端口
  ipv6: true                            # 支持 IPv6 解析
  enhanced-mode: fake-ip                # 启用 Fake-IP 模式
  fake-ip-range: 198.18.0.1/16          # Fake-IP 地址池
  default-nameserver:                   # 初始 DNS 服务器（用于引导 DoH 连接）
    - 223.5.5.5
    - 221.5.88.88
    - 210.21.196.6
    - 116.116.116.116
  nameserver:                           # 主 DNS 解析服务器（加密传输）
    - https://dns.alidns.com/dns-query  # 主用
    - https://doh.pub/dns-query         # 备用
  fake-ip-filter:                       # 排除 Fake-IP 的域名列表
    - +.lan                             # 所有 .lan 本地域名
    - +.local                           # 所有 .local 本地域名
    - geosite:cn                        # 国内域名（自动排除代理）
    - +.docker.io                       # Docker 官方域名
    - "Mijia Cloud"                     # 小米能家居云
    - "dlg.io.mi.com"                   # 小米设备日志上报 
    - "*.push.apple.com"                # 苹果推送通知
    - "*.apple.com"                     # 苹果系服务（iCloud/App Store等）
    - "*.wechat.com"                    # 微信
    - "*.qpic.cn"                       # 微信图片
    - "*.wechatapp.com"                 # 微信小程序
    - "*.qq.com"                        # QQ核心服务
    - "*.vivox.com"                     # 游戏语音


# ==================== 代理策略组 ====================
# 出站锚点
pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, 🔯 欧洲故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 欧洲自动, 🇭🇰 香港手动, 🇯🇵 日本手动, 🇸🇬 新加坡手动, 🇺🇸 美国手动, 🇪🇺 欧洲手动, 🌐 其他手动, DIRECT, REJECT]}

# 策略组类型模板（fallback故障转移、select手动、url-test自动）
x-select-template: &select-template {type: select, include-all: true}
x-fallback-template: &fallback-template {type: fallback, interval: 300, lazy: false, hidden: true}
x-url-test-template: &url-test-template {type: url-test, include-all: true, tolerance: 50, interval: 300, hidden: true}

# 节点筛选
x-filters:
  hk: &hk-filter "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
  jp: &jp-filter "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"
  sg: &sg-filter "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"
  us: &us-filter "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"
  eu: &eu-filter "(?=.*(奥|比|保|克罗地亚|塞|捷|丹|爱沙|芬|法|德|希|匈|爱尔|意|拉|立|卢|马|荷|波|葡|罗|斯洛伐|斯洛文|西|瑞|英|🇧🇪|🇨🇿|🇩🇰|🇫🇮|🇫🇷|🇩🇪|🇮🇪|🇮🇹|🇱🇹|🇱🇺|🇳🇱|🇵🇱|🇸🇪|🇬🇧|CDG|FRA|AMS|MAD|BCN|FCO|MUC|BRU)).*$"
  other: &other-filter "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|奥|比|保|克罗地亚|塞|捷|丹|爱沙|芬|法|德|希|匈|爱尔|意|拉|立|卢|马其它|荷|波|葡|罗|斯洛伐|斯洛文|西|瑞|英|🇧🇪|🇨🇿|🇩🇰|🇫🇮|🇫🇷|🇩🇪|🇮🇪|🇮🇹|🇱🇹|🇱🇺|🇳🇱|🇵🇱|🇸🇪|🇬🇧|CDG|FRA|AMS|MAD|BCN|FCO|MUC|BRU)).)*$"

# 策略组场景列表
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, 🔯 欧洲故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 欧洲自动, 🇭🇰 香港手动, 🇯🇵 日本手动, 🇸🇬 新加坡手动, 🇺🇸 美国手动, 🇪🇺 欧洲手动, 🌐 其他手动, DIRECT, REJECT]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *pr}

# 策略组区域列表
  # 香港组
  - {name: 🔯 香港故转, <<: *fallback-template, proxies: [🇭🇰 香港手动, ♻️ 香港自动]}
  - {name: 🇭🇰 香港手动, <<: *select-template, filter: *hk-filter}
  - {name: ♻️ 香港自动, <<: *url-test-template, filter: *hk-filter}

  # 日本组
  - {name: 🔯 日本故转, <<: *fallback-template, proxies: [🇯🇵 日本手动, ♻️ 日本自动]}
  - {name: 🇯🇵 日本手动, <<: *select-template, filter: *jp-filter}
  - {name: ♻️ 日本自动, <<: *url-test-template, filter: *jp-filter}

  # 新加坡组
  - {name: 🔯 新加坡故转, <<: *fallback-template, proxies: [🇸🇬 新加坡手动, ♻️ 新加坡自动]}
  - {name: 🇸🇬 新加坡手动, <<: *select-template, filter: *sg-filter}
  - {name: ♻️ 新加坡自动, <<: *url-test-template, filter: *sg-filter}

  # 美国组
  - {name: 🔯 美国故转, <<: *fallback-template, proxies: [🇺🇸 美国手动, ♻️ 美国自动]}
  - {name: 🇺🇸 美国手动, <<: *select-template, filter: *us-filter}
  - {name: ♻️ 美国自动, <<: *url-test-template, filter: *us-filter}

  # 欧洲组
  - {name: 🔯 欧洲故转, <<: *fallback-template, proxies: [🇪🇺 欧洲手动, ♻️ 欧洲自动]}
  - {name: 🇪🇺 欧洲手动, <<: *select-template, filter: *eu-filter}
  - {name: ♻️ 欧洲自动, <<: *url-test-template, filter: *eu-filter}

  # 其他组
  - {name: 🌐 其他手动, <<: *select-template, filter: *other-filter}


# ==================== 规则路由 ====================
# 应用规则
rules:
  # 局域网10.0.0.11-10.0.0.254走直连
  - SRC-IP-CIDR,10.0.0.11/32,DIRECT
  - SRC-IP-CIDR,10.0.0.12/30,DIRECT
  - SRC-IP-CIDR,10.0.0.16/28,DIRECT
  - SRC-IP-CIDR,10.0.0.32/27,DIRECT
  - SRC-IP-CIDR,10.0.0.64/26,DIRECT
  - SRC-IP-CIDR,10.0.0.128/26,DIRECT
  - SRC-IP-CIDR,10.0.0.192/27,DIRECT
  - SRC-IP-CIDR,10.0.0.224/28,DIRECT
  - SRC-IP-CIDR,10.0.0.240/29,DIRECT
  - SRC-IP-CIDR,10.0.0.248/30,DIRECT
  - SRC-IP-CIDR,10.0.0.252/31,DIRECT
  - SRC-IP-CIDR,10.0.0.254/32,DIRECT

  # 特定域名走直连
  #  - DOMAIN,ipv6.ddnspod.com,DIRECT

  # 场景分流
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
# 规则锚点
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

# 规则来源
rule-providers: 
  # 域名规则
  private_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite:         { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai:                { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  onedrive_domain:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain:  { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain:      { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain:  { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain:        { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain:         { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}

  # IP地址规则
  cn_ip:             { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip:         { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip:       { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip:        { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
