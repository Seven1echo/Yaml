# 名称：Seven1_fallback
# 版本: V1.9
# 地址：https://github.com/Seven1echo/Yaml
# 日期：2025年9月28日
# 说明：Clash/Nikki 配置，适配多区域节点、场景分流，优化冗余与可读性


# ==================== 节点订阅 ===================
# 订阅锚点：统一订阅参数（1天更新、直连更新、300s国内地址健康检测）
PProviders: &PProviders {type: http, interval: 86400, proxy: DIRECT, health-check: {enable: true, url: 'https://www.gstatic.com/generate_204', interval: 300, timeout: 3000}}

# 订阅设置：【需替换】订阅链接*、机场*为实际机场信息；机场*是区分机场的给每个节点添加固定的前缀；订阅条数多余可删除，需多条可新增
proxy-providers:
#  订阅1: {<<: *PProviders, url: '订阅链接1', override: {additional-prefix: '[机场1] '}}
#  订阅2: {<<: *PProviders, url: '订阅链接2', override: {additional-prefix: '[机场2] '}}

# 自建节点信息
proxies:
#  - name: Home
#    type: ss
#    server: ****.top                             # 确认域名/IP有效
#    port: ****                                   # 确认端口开放
#    cipher: aes-256-gcm                          # 需与服务端加密一致
#    password: "****"                             # 特殊字符时建议加引号
#    udp: true                                    # 支持UDP（如游戏、语音）
 

# ==================== 核心配置 ===================
# 基础配置
mode: rule                                        # 规则模式（按规则分流）
port: 7890                                        # HTTP代理端口
socks-port: 7891                                  # SOCKS5 代理端口
redir-port: 7892                                  # 透明代理端口（适用于路由器/网关）
mixed-port: 7893                                  # 混合端口（支持HTTP/SOCKS5）
tproxy-port: 7895                                 # TPROXY端口（Linux透明代理）
ipv6: true                                        # 开启ipv6
allow-lan: true                                   # 允许局域网设备连接
log-level: warning                                # 日志级别（debug=调试, info=普通信息, warning=仅警告, error=仅错误）
bind-address: '*'                                 # 绑定所有网络接口（局域网可访问）
unified-delay: true                               # 统一延迟处理（减少波动）
tcp-concurrent: true                              # 启用TCP并发连接（提升多任务性能）
find-process-mode: 'off'                          # always=始终查找进程 off=关闭查找进程
global-client-fingerprint: random                 # 客户端伪装 随机选择一个预设的指纹模板（通常包含 Chrome、Firefox、Safari、Edge 等主流浏览器的特征）
keep-alive-interval: 30                           # TCP保活间隔（防止连接断开）
keep-alive-idle: 600                              # 连接空闲超时（释放闲置连接）

# 认证配置
authentication:
  - ""                                            # 认证密码（启用时填写，格式：“用户名:密码”）
skip-auth-prefixes:                               # 免认证网段（家庭局域网）
  - 127.0.0.1/8                                   # 本地回环
  - 10.0.0.0/8                                    # A类内网
  - 172.16.0.0/12                                 # B类内网
  - 192.168.0.0/16                                # C类内网（覆盖所有192.168.x.0网段，简化配置）

# 地理数据配置
geodata-mode: false                               # 加载模式（true:DAT, false:MMDB）
geodata-loader: standard                          # 标准加载器（兼容大多数环境）
geo-auto-update: true                             # 启用自动更新
geo-update-interval: 48                           # 更新间隔为 48 小时
geox-url:                                         # 地理数据下载地址（MetaCubeX官方源）
  geosite: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb:    "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.metadb"
  geoip:   "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn:     "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 管理面板
external-ui-url: https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip
external-ui-name: zashboard                       # 面板名称
external-ui: ui                                   # 面板本地目录
external-controller: 0.0.0.0:9090                 # 控制地址（局域网可访问）
secret: ""                                        # 面板密码（启用时填写，格式："密码"）

# 配置存储
profile:
  store-selected: true                            # 保存手动选择的节点/策略组
  store-fake-ip: true                             # 保存Fake-IP映射（提升DNS解析速度）

# 流量嗅探
sniffer:
  enable: true                                    # 启用嗅探（提升分流准确性）
  override-destination: false                     # 不覆盖目标地址（避免流量异常）
  force-dns-mapping: true                         # 强制DNS映射（Fake-IP模式必备）
  parse-pure-ip: true                             # 解析纯IP流量（识别IP直连的服务）

# TUN配置
tun:
  enable: true                                    # 启用TUN（全局代理核心）
  stack: mixed                                    # 混合协议栈（gVisor+内核，兼容更多场景）
  dns-hijack:                                     # 劫持DNS流量（避免DNS泄漏）
    - "any:53"                                    # 劫持UDP 53端口
    - "tcp://any:53"                              # 劫持TCP 53端口
  auto-route: true                                # 自动添加路由（无需手动配置路由表）
  auto-redirect: true                             # 自动重定向流量到TUN（全局代理生效）
  auto-detect-interface: true                     # 自动检测出口网卡（适配多网卡环境）

# DNS设置
dns:
  enable: true                                    # 启用内置DNS
  listen: 0.0.0.0:7874                            # DNS监听端口
  cache: true                                     # 开启 DNS 缓存
  cache-max-ttl: 3600                             # 缓存有效期 1 小时（常用域名无需频繁解析）
  cache-min-ttl: 60                               # 最短缓存 1 分钟（避免瞬时失效）
  ipv6: true                                      # 支持IPv6解析
  enhanced-mode: fake-ip                          # Fake-IP模式（核心：本地解析+无泄漏）
  fake-ip-range: 198.18.0.1/16                    # Fake-IP地址池（默认范围）
  fake-ip-filter-mode: blacklist                  # 过滤列表模式
  fake-ip-filter:                                 # 排除Fake-IP的域名（直连解析，如本地服务）
    - "rule-set:private_domain,cn_domain"         # 引用私有域名和国内域名规则集，这些域名走真实IP解析
    - "+.msftconnecttest.com"                     # Windows网络连接检测域名，避免系统误判网络状态
    - "+.msftncsi.com"                            # Windows网络状态指示器域名，确保NCSI检测正常
    - "time.*.com"                                # 常见的网络时间同步(NTP)服务器域名，保证时间校准准确
  nameserver:                                     # 主DNS服务器（用运营商提供的DNS）
    - 116.116.116.116
    - 221.5.88.88


# ==================== 代理策略组 ====================
# 出站锚点
pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, 🔯 欧洲故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 欧洲自动, 🇭🇰 香港手动, 🇯🇵 日本手动, 🇸🇬 新加坡手动, 🇺🇸 美国手动, 🇪🇺 欧洲手动, 🌐 其他手动, DIRECT, REJECT]}

# 策略组模板 ==》 select（手动选择）、fallback（故障转移）、url-test（自动选优）
x-select-template: &select-template {type: select, include-all: true}
x-fallback-template: &fallback-template {type: fallback, interval: 300, lazy: false, hidden: true}
x-url-test-template: &url-test-template {type: url-test, include-all: true, tolerance: 50, interval: 300, hidden: true}

# 区域节点筛选 ==》 根据关键字筛选区域节点
x-filters:
  hk: &hk-filter "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
  jp: &jp-filter "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"
  sg: &sg-filter "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"
  us: &us-filter "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"
  eu: &eu-filter "(?=.*(奥|比|保|克罗地亚|塞|捷|丹|爱沙|芬|法|德|希|匈|爱尔|意|拉|立|卢|马|荷|波|葡|罗|斯洛伐|斯洛文|西|瑞|英|🇧🇪|🇨🇿|🇩🇰|🇫🇮|🇫🇷|🇩🇪|🇮🇪|🇮🇹|🇱🇹|🇱🇺|🇳🇱|🇵🇱|🇸🇪|🇬🇧|CDG|FRA|AMS|MAD|BCN|FCO|MUC|BRU)).*$"
  other: &other-filter "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|奥|比|保|克罗地亚|塞|捷|丹|爱沙|芬|法|德|希|匈|爱尔|意|拉|立|卢|马其它|荷|波|葡|罗|斯洛伐|斯洛文|西|瑞|英|🇧🇪|🇨🇿|🇩🇰|🇫🇮|🇫🇷|🇩🇪|🇮🇪|🇮🇹|🇱🇹|🇱🇺|🇳🇱|🇵🇱|🇸🇪|🇬🇧|CDG|FRA|AMS|MAD|BCN|FCO|MUC|BRU)).)*$"

# 场景策略组 ==》 按“服务类型”分流
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, 🔯 新加坡故转, 🔯 美国故转, 🔯 欧洲故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 美国自动, ♻️ 欧洲自动, 🇭🇰 香港手动, 🇯🇵 日本手动, 🇸🇬 新加坡手动, 🇺🇸 美国手动, 🇪🇺 欧洲手动, 🌐 其他手动, DIRECT, REJECT]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [DIRECT, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *pr}

# 策略组区域列表
  # 香港组
  - {name: 🔯 香港故转, <<: *fallback-template, proxies: [🇭🇰 香港手动, ♻️ 香港自动]}
  - {name: 🇭🇰 香港手动, <<: *select-template, filter: *hk-filter}
  - {name: ♻️ 香港自动, <<: *url-test-template, filter: *hk-filter}

  # 日本组
  - {name: 🔯 日本故转, <<: *fallback-template, proxies: [🇯🇵 日本手动, ♻️ 日本自动]}
  - {name: 🇯🇵 日本手动, <<: *select-template, filter: *jp-filter}
  - {name: ♻️ 日本自动, <<: *url-test-template, filter: *jp-filter}

  # 新加坡组
  - {name: 🔯 新加坡故转, <<: *fallback-template, proxies: [🇸🇬 新加坡手动, ♻️ 新加坡自动]}
  - {name: 🇸🇬 新加坡手动, <<: *select-template, filter: *sg-filter}
  - {name: ♻️ 新加坡自动, <<: *url-test-template, filter: *sg-filter}

  # 美国组
  - {name: 🔯 美国故转, <<: *fallback-template, proxies: [🇺🇸 美国手动, ♻️ 美国自动]}
  - {name: 🇺🇸 美国手动, <<: *select-template, filter: *us-filter}
  - {name: ♻️ 美国自动, <<: *url-test-template, filter: *us-filter}

  # 欧洲组
  - {name: 🔯 欧洲故转, <<: *fallback-template, proxies: [🇪🇺 欧洲手动, ♻️ 欧洲自动]}
  - {name: 🇪🇺 欧洲手动, <<: *select-template, filter: *eu-filter}
  - {name: ♻️ 欧洲自动, <<: *url-test-template, filter: *eu-filter}

  # 其他组
  - {name: 🌐 其他手动, <<: *select-template, filter: *other-filter}


# ==================== 规则路由 ====================
# 应用规则
rules:
  # 特定IP段直连：覆盖10.0.0.11~254（局域网设备）
  - SRC-IP-CIDR,10.0.0.11/32,DIRECT
  - SRC-IP-CIDR,10.0.0.12/30,DIRECT
  - SRC-IP-CIDR,10.0.0.16/28,DIRECT
  - SRC-IP-CIDR,10.0.0.32/27,DIRECT
  - SRC-IP-CIDR,10.0.0.64/26,DIRECT
  - SRC-IP-CIDR,10.0.0.128/26,DIRECT
  - SRC-IP-CIDR,10.0.0.192/27,DIRECT
  - SRC-IP-CIDR,10.0.0.224/28,DIRECT
  - SRC-IP-CIDR,10.0.0.240/29,DIRECT
  - SRC-IP-CIDR,10.0.0.248/30,DIRECT
  - SRC-IP-CIDR,10.0.0.252/31,DIRECT
  - SRC-IP-CIDR,10.0.0.254/32,DIRECT

  # 场景分流
  - RULE-SET,private_domain,DIRECT
  - RULE-SET,Seven1_DIRECT,DIRECT
  - RULE-SET,Seven1_REJECT,REJECT
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
# 规则锚点
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}            # IP规则集模板
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}    # 域名规则集模板
  class: &class {type: http, interval: 86400, behavior: classical, format: text}  # 文本规则集模板

# 规则来源
rule-providers: 
  # 域名规则
  private_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  apple_domain:      { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  ai:                { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  github_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  youtube_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  onedrive_domain:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain:  { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  tiktok_domain:     { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  speedtest_domain:  { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  telegram_domain:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain:    { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  gfw_domain:        { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn:   { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain:         { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  Seven1_DIRECT:     { <<: *class, url: "https://raw.githubusercontent.com/Seven1echo/Yaml/refs/heads/main/list/DIRECT.list"}
  Seven1_REJECT:     { <<: *class, url: "https://raw.githubusercontent.com/Seven1echo/Yaml/refs/heads/main/list/REJECT.list"}

  # IP地址规则
  cn_ip:             { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip:         { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip:       { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip:        { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
